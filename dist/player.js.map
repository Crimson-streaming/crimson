{
  "version": 3,
  "sources": ["../src/player.js"],
  "sourcesContent": ["document.addEventListener('DOMContentLoaded', () => {\r\n    const screenIsLargeEnough = window.innerWidth >= 600;\r\n\r\n    const playerControls = screenIsLargeEnough ?\r\n        ['play-large', 'rewind', 'play', 'fast-forward', 'progress', 'current-time', 'mute', 'volume', 'settings', 'captions', 'pip', 'airplay', 'fullscreen'] :\r\n        ['play-large', 'rewind', 'play', 'fast-forward', 'progress', 'current-time', 'settings', 'captions', 'pip', 'airplay', 'fullscreen'];\r\n\r\n    const player = new Plyr('#player', {\r\n        controls: playerControls,\r\n        settings: [\"captions\", \"quality\", \"speed\"],\r\n        playsinline: true,\r\n        keyboard: {\r\n            focused: true,\r\n            global: true\r\n        },\r\n        fullscreen: {\r\n            enabled: true,\r\n            fallback: true,\r\n            iosNative: true\r\n        },\r\n        storage: {\r\n            enabled: true,\r\n            key: \"player\"\r\n        },\r\n        invertTime: false,\r\n        disableContextMenu: true,\r\n        ratio: \"16:9\",\r\n        i18n: {\r\n            restart: 'Recommencer',\r\n            rewind: 'Revenir de {seektime}s',\r\n            play: 'Lecture',\r\n            pause: 'Pause',\r\n            fastForward: 'Avancer de {seektime}s',\r\n            seek: 'Rechercher',\r\n            seekLabel: '{currentTime} de {duration}',\r\n            played: 'Lanc\u00E9',\r\n            buffered: 'Mis en m\u00E9moire',\r\n            currentTime: 'Temps actuel',\r\n            duration: 'Dur\u00E9e',\r\n            volume: 'Volume',\r\n            mute: 'Silence',\r\n            unmute: 'Son activ\u00E9',\r\n            enableCaptions: 'Activer les sous-titres',\r\n            disableCaptions: 'D\u00E9sactiver les sous-titres',\r\n            download: 'T\u00E9l\u00E9charger',\r\n            enterFullscreen: 'Plein \u00E9cran',\r\n            exitFullscreen: 'Sortir du plein \u00E9cran',\r\n            frameTitle: 'Lecteur pour {title}',\r\n            captions: 'Sous-titres',\r\n            settings: 'R\u00E9glages',\r\n            pip: 'Picture-In-Picture',\r\n            menuBack: 'Retour au menu pr\u00E9c\u00E9dent',\r\n            speed: 'Vitesse',\r\n            normal: 'Normal',\r\n            quality: 'Qualit\u00E9',\r\n            loop: 'Boucle',\r\n            start: 'D\u00E9but',\r\n            end: 'Fin',\r\n            all: 'Tous',\r\n            reset: 'R\u00E9initialiser',\r\n            disabled: 'D\u00E9sactiv\u00E9',\r\n            enabled: 'Activ\u00E9',\r\n            advertisement: 'Publicit\u00E9',\r\n        },\r\n        volume: 1,\r\n        muted: false\r\n    });\r\n\r\n    const videoElement = document.getElementById('player');\r\n    const loaderElement = document.getElementById('video-loader');\r\n    const hlsSource = videoElement.querySelector('source').src;\r\n\r\n    const storageKey = `videoCurrentTime_${encodeURIComponent(hlsSource)}`;\r\n\r\n\r\nconst isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\r\n\r\n\r\nif (!isIOS) {\r\n    player.on('ready', () => {\r\n        const container = document.querySelector('.plyr__controls');\r\n        if (!container) return;\r\n\r\n        const pipButton = container.querySelector('[data-plyr=\"pip\"]');\r\n        if (pipButton) {\r\n            const airplayButton = document.createElement('button');\r\n            airplayButton.classList.add('plyr__control');\r\n            airplayButton.id = 'castButton';\r\n\r\n            airplayButton.innerHTML = `\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" width=\"100\" height=\"100\">\r\n                    <path d=\"M447.8 64H64c-23.6 0-42.7 19.1-42.7 42.7v63.9H64v-63.9h383.8v298.6H298.6V448H448c23.6 0 42.7-19.1 42.7-42.7V106.7C490.7 83.1 471.4 64 447.8 64zM21.3 383.6L21.3 383.6l0 63.9h63.9C85.2 412.2 56.6 383.6 21.3 383.6L21.3 383.6zM21.3 298.6V341c58.9 0 106.6 48.1 106.6 107h42.7C170.7 365.6 103.7 298.7 21.3 298.6zM213.4 448h42.7c-.5-129.5-105.3-234.3-234.8-234.6l0 42.4C127.3 255.6 213.3 342 213.4 448z\" fill=\"white\"/>\r\n                </svg>\r\n            `;\r\n\r\n            pipButton.insertAdjacentElement('afterend', airplayButton);\r\n\r\n            const castButton = document.getElementById(\"castButton\");\r\n            if (castButton) {\r\n                castButton.addEventListener(\"click\", () => {\r\n                    const castContext = cast.framework.CastContext.getInstance();\r\n\r\n                    if (!castContext.getCastState()) {\r\n                        castContext.setOptions(castOptions);\r\n                    }\r\n\r\n                    const castState = castContext.getCastState();\r\n                    if (castState === cast.framework.CastState.CONNECTING || castState === cast.framework.CastState.CONNECTED) {\r\n                        startCasting();\r\n                    } else {\r\n                        castContext.requestSession();\r\n                    }\r\n                });\r\n            } else {\r\n                console.error(\"Le bouton Cast n'a pas \u00E9t\u00E9 trouv\u00E9.\");\r\n            }\r\n        }\r\n    });\r\n}\r\nconst loadVideoTime = () => {\r\n        const savedTime = localStorage.getItem(storageKey);\r\n        if (savedTime) {\r\n            videoElement.currentTime = parseFloat(savedTime);\r\n        }\r\n    };\r\n\r\n    const toggleLoader = (show) => {\r\n        loaderElement.style.display = show ? 'block' : 'none';\r\n    };\r\n\r\n    toggleLoader(false);\r\n\r\n    videoElement.addEventListener('pause', () => {\r\n        toggleLoader(false);\r\n    });\r\n\r\n    videoElement.addEventListener('play', () => {\r\n        toggleLoader(true);\r\n    });\r\n\r\n    if (Hls.isSupported()) {\r\n        const hls = new Hls();\r\n        hls.loadSource(hlsSource);\r\n        hls.attachMedia(videoElement);\r\n\r\n        hls.on(Hls.Events.MANIFEST_PARSED, () => toggleLoader(false));\r\n        hls.on(Hls.Events.BUFFER_STALLED, () => toggleLoader(true));\r\n\r\n        videoElement.addEventListener('timeupdate', () => {\r\n            localStorage.setItem(storageKey, videoElement.currentTime);\r\n        });\r\n\r\n        videoElement.addEventListener('waiting', () => toggleLoader(true));\r\n        videoElement.addEventListener('playing', () => toggleLoader(false));\r\n\r\n        loadVideoTime();\r\n    } else if (videoElement.canPlayType('application/vnd.apple.mpegurl')) {\r\n        videoElement.src = hlsSource;\r\n\r\n        videoElement.addEventListener('loadeddata', () => toggleLoader(false));\r\n        videoElement.addEventListener('waiting', () => toggleLoader(true));\r\n        videoElement.addEventListener('timeupdate', () => {\r\n            localStorage.setItem(storageKey, videoElement.currentTime);\r\n        });\r\n\r\n        loadVideoTime();\r\n    } else {\r\n        console.error('HLS non support\u00E9, ou aucun fallback compatible disponible.');\r\n        toggleLoader(false); // Masquer le loader en cas d'erreur\r\n    }\r\n    function initializeCastApi() {\r\n        if (typeof cast === 'undefined' || !cast.framework) {\r\n            console.error(\"Google Cast Framework non disponible.\");\r\n            return;\r\n        }\r\n\r\n        const castContext = cast.framework.CastContext.getInstance();\r\n\r\n        castContext.setOptions({\r\n            receiverApplicationId: chrome.cast.media.DEFAULT_MEDIA_RECEIVER_APP_ID,\r\n            autoJoinPolicy: chrome.cast.AutoJoinPolicy.ORIGIN_SCOPED,\r\n        });\r\n\r\n        castContext.addEventListener(cast.framework.CastContextEventType.SESSION_STATE_CHANGED, (event) => {\r\n            if (event.sessionState === cast.framework.SessionState.SESSION_STARTED ||\r\n                event.sessionState === cast.framework.SessionState.SESSION_RESUMED) {\r\n                startCasting();\r\n            }\r\n        });\r\n    }\r\n\r\n    function startCasting() {\r\n        const castContext = cast.framework.CastContext.getInstance();\r\n        const castSession = castContext.getCurrentSession();\r\n\r\n        if (castSession) {\r\n            const videoElement = document.querySelector(\"#player source\");\r\n            const videoSource = videoElement ? videoElement.src : null;\r\n\r\n            if (videoSource) {\r\n                const mediaInfo = new chrome.cast.media.MediaInfo(videoSource, \"application/x-mpegURL\");\r\n                mediaInfo.metadata = new chrome.cast.media.GenericMediaMetadata();\r\n                mediaInfo.metadata.title = \"CAST | Crimson\";\r\n\r\n                const loadRequest = new chrome.cast.media.LoadRequest(mediaInfo);\r\n                castSession\r\n                    .loadMedia(loadRequest)\r\n                    .then(() => console.log(\"Vid\u00E9o diffus\u00E9e avec succ\u00E8s.\"))\r\n                    .catch((error) => console.error(\"Erreur de diffusion :\", error));\r\n            }\r\n        }\r\n    }\r\n\r\n    window['__onGCastApiAvailable'] = function(isAvailable) {\r\n        if (isAvailable) {\r\n            initializeCastApi();\r\n        } else {\r\n            console.error(\"API Google Cast non disponible.\");\r\n        }\r\n    };\r\n});\r\n\r\ndocument.querySelector('#regarder').addEventListener('click', function (e) {\r\n    var lecteur = document.querySelector('#player');\r\n\r\n    lecteur.scrollIntoView({\r\n      behavior: 'smooth',\r\n      block: 'center'    \r\n    });\r\n\r\n    setTimeout(function () {\r\n      if (lecteur && typeof Plyr !== 'undefined') {\r\n        var plyrInstance = new Plyr(lecteur);\r\n\r\n        plyrInstance.play().catch(error => {\r\n          console.error('Erreur lors de la tentative de lecture automatique :', error);\r\n        });\r\n      } else {\r\n        console.error('Le lecteur Plyr n\u2019est pas d\u00E9tect\u00E9 ou n\u2019a pas \u00E9t\u00E9 initialis\u00E9 correctement.');\r\n      }\r\n    }, 500);\r\n  });"],
  "mappings": "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",
  "names": ["playerControls", "player", "videoElement", "loaderElement", "hlsSource", "storageKey", "container", "pipButton", "airplayButton", "castButton", "castContext", "castState", "startCasting", "loadVideoTime", "savedTime", "toggleLoader", "show", "hls", "initializeCastApi", "event", "castSession", "videoSource", "mediaInfo", "loadRequest", "error", "isAvailable", "e", "lecteur", "plyrInstance"]
}
